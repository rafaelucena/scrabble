#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('scrabble:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = require('socket.io')(server);

/**
 * Listen on provided port, on all network interfaces.
 */

var connectedSockets={};
var allUsers=[{nickname:"",color:"#000"}];//初始值即包含"群聊",用""表示nickname
io.on('connection',function (socket) {
  socket.on('addUser',function (data){ //有新用户进入聊天室
    if(connectedSockets[data.nickname]){//昵称已被占用
      socket.emit('userAddingResult',{result:false});
    } else {
      socket.emit('userAddingResult',{result:true});
      socket.nickname=data.nickname;
      connectedSockets[socket.nickname]=socket;//保存每个socket实例,发私信需要用
      allUsers.push(data);
      socket.broadcast.emit('userAdded',data);//广播欢迎新用户,除新用户外都可看到
      socket.emit('allUser',allUsers);//将所有在线用户发给新用户
    }
  });

  socket.on('addMessage',function(data){ //有用户发送新消息
    if (data.to) {//发给特定用户
      connectedSockets[data.to].emit('messageAdded',data);
    } else {//群发
      socket.broadcast.emit('messageAdded',data);//广播消息,除原发送者外都可看到
    }
  });

  socket.on('disconnect', function () {  //有用户退出聊天室
    socket.broadcast.emit('userRemoved', {  //广播有用户退出
        nickname: socket.nickname
    });
    for(var i=0;i<allUsers.length;i++){
        if(allUsers[i].nickname==socket.nickname){
            allUsers.splice(i,1);
        }
    }
    delete connectedSockets[socket.nickname]; //删除对应的socket实例
  });
});

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
